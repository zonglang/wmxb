var net = require('net');
// const HOST = '0.0.0.0';
const HOST = '47.93.192.32';
const PORT = 10380;
// 功能：模拟小车发送位置信息给服务器
// 参数：路径点数组
// 使用：按一下发送一个
// 改进：使用迭代器封装路径数组，对异步事件加入异常处理
var pointList = ["30.518474,114.345245","30.518463,114.345236","30.518463,114.345232","30.518459,114.345227","30.518443,114.345205","30.518443,114.345191","30.518432,114.345187","30.518424,114.345173","30.518412,114.345164","30.518401,114.345146","30.518397,114.345133","30.518385,114.345129","30.518381,114.345115","30.518369,114.345111","30.518369,114.345093","30.51835,114.345079","30.518342,114.345084","30.518338,114.34507","30.518334,114.345057","30.518331,114.345043","30.518307,114.34503","30.518307,114.345021","30.518296,114.345003","30.518292,114.344985","30.518276,114.344976","30.518261,114.344944","30.518257,114.34494","30.518245,114.344922","30.518233,114.344913","30.518229,114.344895","30.518226,114.344881","30.518218,114.344855","30.518202,114.34485","30.518198,114.344846","30.518191,114.344823","30.518183,114.344814","30.518183,114.34481","30.518167,114.344792","30.518167,114.344778","30.518156,114.34476","30.518152,114.34476","30.518148,114.344751","30.518144,114.344742","30.518136,114.344729","30.518121,114.34472","30.518105,114.344706","30.518101,114.344688","30.518089,114.34467","30.518082,114.344652","30.518082,114.344639","30.518066,114.344625","30.518062,114.344616","30.518051,114.344599","30.518047,114.344594","30.518031,114.344585","30.518016,114.344563","30.518,114.344554","30.518,114.34454","30.517988,114.344522","30.517996,114.344504","30.517996,114.344495","30.518004,114.344473","30.518016,114.344455","30.518027,114.344437","30.518047,114.344414","30.518074,114.344396","30.518093,114.344369","30.518097,114.344347","30.518121,114.34432","30.518109,114.344311","30.518113,114.344293","30.518117,114.344266","30.518124,114.344239","30.518124,114.344217","30.518132,114.344194","30.51814,114.344163","30.51814,114.344149","30.51814,114.344127","30.51814,114.344109","30.51814,114.344091","30.51814,114.344055","30.518136,114.344037","30.518136,114.344015","30.518132,114.343992","30.518124,114.343983","30.518124,114.34397","30.518109,114.343952","30.518097,114.343947","30.518093,114.343938","30.518066,114.343911","30.518066,114.343884","30.518054,114.343884","30.518051,114.34388","30.518039,114.343871","30.518027,114.343871","30.518023,114.343857","30.518,114.343839","30.517981,114.343839","30.517957,114.343821","30.517938,114.343817","30.517926,114.343808","30.517911,114.343808","30.517891,114.343799","30.517876,114.343799","30.517864,114.34379","30.517848,114.34379","30.517829,114.34379","30.517817,114.343786","30.517809,114.343786","30.517794,114.343786","30.517782,114.343786","30.517767,114.343786","30.517759,114.343786","30.517732,114.343777","30.517732,114.343759","30.517716,114.343754","30.517708,114.343718","30.517693,114.343705","30.517685,114.343691","30.517669,114.343678","30.517646,114.343637","30.517623,114.343628","30.517623,114.343588","30.517607,114.343574","30.517607,114.343552","30.517592,114.343534","30.517568,114.343516","30.517568,114.343489","30.517553,114.343467","30.517526,114.343467","30.517514,114.343435","30.517514,114.343413","30.517502,114.343408","30.517494,114.343386","30.517475,114.343381","30.517463,114.343354","30.517459,114.343323","30.517428,114.343318","30.517444,114.343296","30.517436,114.343269","30.517409,114.343269","30.517393,114.343256","30.517378,114.343233","30.517378,114.343211","30.517362,114.343197","30.517351,114.34317","30.517335,114.343166","30.517323,114.343143","30.517308,114.343116","30.517288,114.343094","30.517269,114.34308","30.517253,114.343058","30.517242,114.343053","30.517226,114.343026","30.517222,114.342986","30.517249,114.342946","30.517273,114.342919","30.517249,114.342887","30.517238,114.342856","30.517246,114.342824","30.517226,114.342811","30.517211,114.342779","30.517211,114.342757","30.517195,114.34273","30.517176,114.342703","30.517183,114.342681","30.517183,114.342649","30.517195,114.342609","30.517203,114.342564","30.517207,114.342541","30.517214,114.342514","30.517218,114.342479","30.517226,114.342447","30.51723,114.342411","30.517238,114.342375","30.517257,114.342339","30.517257,114.342299","30.517261,114.342245","30.517261,114.3422","30.517277,114.34216","30.517288,114.342115","30.517292,114.342092","30.517308,114.342052","30.517316,114.34202","30.517316,114.341984","30.517323,114.341953","30.517323,114.341913","30.517339,114.341881","30.517343,114.341859","30.517351,114.341836","30.517351,114.341809","30.517354,114.341778","30.517362,114.341746","30.517362,114.341706","30.517374,114.341679","30.517382,114.341652","30.517386,114.34163","30.517389,114.341603","30.517389,114.34158","30.517397,114.341544","30.517401,114.341517","30.517401,114.34149","30.517405,114.341463"]
// var pointList = ["30.518373,114.345227","30.518357,114.345196","30.518338,114.345151","30.518322,114.345133","30.518307,114.345106","30.518276,114.345061","30.51826,114.345025","30.518233,114.344985","30.51821,114.34494","30.51819,114.344895","30.518175,114.344868","30.518163,114.344837","30.518143,114.344805","30.51812,114.344774","30.518105,114.344738","30.518089,114.344702","30.518073,114.344679","30.518058,114.344657","30.518054,114.344635","30.518046,114.344603","30.518046,114.344576","30.518046,114.344549","30.518066,114.344518","30.518073,114.3445","30.518089,114.344477","30.518105,114.34445","30.518116,114.344428","30.518128,114.344392","30.51814,114.344356","30.518151,114.344316","30.518159,114.34428","30.518159,114.344248","30.518159,114.344212","30.518159,114.34419","30.518159,114.344154","30.518151,114.344131","30.518151,114.344091","30.518143,114.344069","30.518136,114.344042","30.518124,114.34401","30.518105,114.343988","30.518093,114.34397","30.518073,114.343956","30.518062,114.343934","30.518038,114.34392","30.518027,114.343902","30.518,114.343884","30.517968,114.343866","30.517933,114.343853","30.517902,114.343844","30.517875,114.343831","30.517848,114.343831","30.517817,114.343817","30.517793,114.343804","30.517778,114.343795","30.517758,114.343759","30.517727,114.343723","30.5177,114.343691","30.517669,114.343633","30.517642,114.343592","30.517603,114.34353","30.517576,114.343494","30.517556,114.343462","30.517525,114.343417","30.51751,114.343368","30.517478,114.343336","30.517463,114.343301","30.517428,114.343251","30.517389,114.343202","30.517366,114.343157","30.517346,114.34313","30.517327,114.343103","30.517315,114.343067","30.517311,114.343045","30.517315,114.343009","30.517323,114.342982","30.517327,114.342937","30.517319,114.342896","30.517323,114.342869","30.517311,114.342842","30.517307,114.342806","30.517292,114.342784","30.517288,114.342744","30.517276,114.34273","30.517261,114.342712","30.517249,114.34269","30.51723,114.342681","30.517226,114.342645","30.517226,114.342604","30.517237,114.342568","30.517245,114.342519","30.517253,114.342429","30.517268,114.342375","30.517276,114.342308","30.517288,114.342267","30.517303,114.342191","30.517315,114.342137","30.517327,114.342083","30.517327,114.342034","30.517342,114.341971","30.51735,114.341926","30.517354,114.34189","30.517354,114.34185","30.517373,114.341818","30.517381,114.341769","30.517397,114.341715","30.517405,114.34167"]
var pointObj = []
pointList.forEach(function(item){
	var arr = item.split(",")
	pointObj.push({
		"lng":arr[1],
		"lat":arr[0]
	})
})
console.log(JSON.stringify(pointObj))
/** 自定义一个迭代器，用于依次发送位置信息
  * @param {Array} pointList 点迹的数组
  */
function iterOver(pointList){
	let i = 0
	let len = pointList.length
	//iterable对象本事也是iterator接口
	//iterable对象要实现[Symbol.iterable]方法
	//iterator对象要实现next方法
	const iterable = {
		[Symbol.iterable](){return this},
		next:async ()=>{
			//在这里进行可以对数据进行操作
			let data = {
				"location":pointList[i],
				"id":"001",
				"state":"1",
				"boxState":"[1,1]",
				"openState":"[0,0]"
			}
			if(i == len - 20){
				data["state"] = "2"
			}
			if(i > len - 20){
				data["state"] = "3"
			}
			let response = {}
			//若服务器异常，计数器不自增
			await sendData(data)
			.then(res => {
				console.log(`Date:${res}`)
				response = {
					value:pointList[i],
					done:i++ > len 
				}
			})
			.catch(err => {
				console.log(`连接服务器失败:`)
				console.log(err)
				response = {
					value:pointList[i],
					done:i > len 
				}
			})
			return response
		}
	}
	return iterable
}
/**  与服务器建立连接并发送数据
  */
async function sendData(data){
	return new Promise((resolve, reject) => {
		//初始化一个socket
		let client = new net.Socket()
		//建立连接
		client.connect(PORT,HOST,function(){
			let dataStr = JSON.stringify(data)
			client.write(dataStr)
		})
		//监听异常
		client.on('error',function(e){
			client.destroy();
			reject(e)
		})
		//监听服务器返回值
		client.on('data', function(data) {
		    client.destroy();	
		    resolve(data) 
		});
	})	
}

let it = iterOver(pointList)
//监听键盘输入
let stdin = process.openStdin()
stdin.on("data",async (chunk) => {
	console.log(await it.next())
})