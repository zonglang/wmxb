var net = require('net');
// const HOST = '0.0.0.0';
const HOST = '47.93.192.32';
const PORT = 10380;
// 功能：模拟小车发送位置信息给服务器
// 参数：路径点数组
// 使用：按一下发送一个
// 改进：使用迭代器封装路径数组，对异步事件加入异常处理
var pointList = ["30.518443,114.345241","30.518439,114.345218","30.518424,114.345196","30.518424,114.345187","30.518412,114.34516","30.518385,114.345169","30.518385,114.345151","30.518381,114.345137","30.518362,114.345133","30.518342,114.34512","30.518338,114.345102","30.518334,114.345088","30.518307,114.345052","30.518288,114.345021","30.518284,114.345007","30.518272,114.344976","30.518253,114.344953","30.518237,114.344926","30.518229,114.344922","30.518222,114.34489","30.51821,114.344881","30.518198,114.344859","30.518167,114.344828","30.518167,114.344787","30.518148,114.344792","30.518136,114.34476","30.518124,114.344756","30.518121,114.344715","30.518101,114.344697","30.518093,114.344684","30.518082,114.34467","30.518058,114.344639","30.518039,114.344607","30.518039,114.344567","30.518027,114.344572","30.518019,114.344554","30.518008,114.344536","30.517981,114.344518","30.517996,114.344495","30.517996,114.344468","30.518023,114.344446","30.518054,114.34441","30.518078,114.344369","30.518093,114.344369","30.518105,114.344338","30.518128,114.344316","30.518128,114.344302","30.518128,114.344284","30.518128,114.344235","30.518148,114.34419","30.518152,114.344163","30.518152,114.344118","30.518152,114.344086","30.518136,114.344064","30.518121,114.344042","30.518113,114.344006","30.518105,114.343997","30.518097,114.343979","30.518074,114.343961","30.518078,114.343938","30.518078,114.343925","30.518051,114.343907","30.518027,114.343893","30.518016,114.343875","30.518,114.343866","30.517984,114.343844","30.517946,114.343835","30.517961,114.343817","30.517946,114.343799","30.517914,114.343817","30.517914,114.343799","30.517899,114.343781","30.517868,114.34379","30.517848,114.343799","30.517833,114.343786","30.517821,114.343781","30.517809,114.343786","30.517806,114.343786","30.517782,114.343772","30.517767,114.343772","30.517743,114.343772","30.51772,114.34375","30.517689,114.343736","30.517685,114.343718","30.517666,114.343678","30.517654,114.343673","30.517642,114.343651","30.517631,114.343619","30.517623,114.343601","30.517611,114.343592","30.517592,114.343583","30.517576,114.343556","30.517541,114.343516","30.517549,114.343498","30.517553,114.343462","30.517549,114.343462","30.517529,114.343462","30.51751,114.343444","30.517475,114.343413","30.517475,114.34339","30.517471,114.343372","30.517432,114.343341","30.517448,114.343332","30.517436,114.343305","30.517432,114.343287","30.517393,114.343274","30.517362,114.343247","30.517366,114.343229","30.517366,114.343202","30.517354,114.343184","30.517335,114.343166","30.517304,114.343157","30.517288,114.343121","30.517277,114.343112","30.517265,114.343094","30.517257,114.343062","30.517246,114.34304","30.51723,114.343017","30.517218,114.342995","30.517226,114.342959","30.517253,114.342928","30.517253,114.342919","30.517253,114.342892","30.517253,114.342869","30.517246,114.342847","30.517222,114.342829","30.517214,114.342806","30.517207,114.342766","30.517222,114.342766","30.517222,114.342717","30.517222,114.342721","30.517214,114.342712","30.517207,114.342694","30.517187,114.342618","30.517195,114.342645","30.517195,114.342609","30.517207,114.342586","30.517207,114.342555","30.517214,114.342528","30.517226,114.342492","30.517242,114.342429","30.517242,114.342398","30.517246,114.34238","30.517246,114.342339","30.517242,114.342303","30.517257,114.342267","30.517265,114.34224","30.517265,114.342214","30.517269,114.342178","30.517284,114.342137","30.517284,114.342119","30.517284,114.342088","30.517284,114.342056","30.517292,114.342025","30.5173,114.342002","30.517312,114.341971","30.517316,114.341949","30.517327,114.341913","30.517339,114.34189","30.517339,114.341859","30.517331,114.34185","30.517327,114.341823","30.517343,114.3418","30.517358,114.341769","30.517362,114.341737","30.517362,114.34171","30.517362,114.341679","30.517374,114.341643"]

/** 自定义一个迭代器，用于依次发送位置信息
  * @param {Array} pointList 点迹的数组
  */
function iterOver(pointList){
	let i = 0
	let len = pointList.length
	//iterable对象本事也是iterator接口
	//iterable对象要实现[Symbol.iterable]方法
	//iterator对象要实现next方法
	const iterable = {
		[Symbol.iterable](){return this},
		next:async ()=>{
			//在这里进行可以对数据进行操作
			let data = {
				"location":pointList[i],
				"id":"001",
				"state":"1",
				"boxState":"[1,1]",
				"openState":"[0,0]"
			}
			let response = {}
			//若服务器异常，计数器不自增
			await sendData(data)
			.then(res => {
				console.log(`Date:${res}`)
				response = {
					value:pointList[i],
					done:i++ > len 
				}
			})
			.catch(err => {
				console.log(`连接服务器失败:`)
				console.log(err)
				response = {
					value:pointList[i],
					done:i > len 
				}
			})
			return response
		}
	}
	return iterable
}
/**  与服务器建立连接并发送数据
  */
async function sendData(data){
	return new Promise((resolve, reject) => {
		//初始化一个socket
		let client = new net.Socket()
		//建立连接
		client.connect(PORT,HOST,function(){
			let dataStr = JSON.stringify(data)
			client.write(dataStr)
		})
		//监听异常
		client.on('error',function(e){
			client.destroy();
			reject(e)
		})
		//监听服务器返回值
		client.on('data', function(data) {
		    client.destroy();	
		    resolve(data) 
		});
	})	
}

let it = iterOver(pointList)
//监听键盘输入
let stdin = process.openStdin()
stdin.on("data",async (chunk) => {
	console.log(await it.next())
})